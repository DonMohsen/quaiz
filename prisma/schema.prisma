generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Document {
  id    Int     @id @default(autoincrement())
  title String?
  text  String?
  image String?
  slug String @unique
  chats      Chat[]
  flashCards FlashCard[]
  quaizzes   Quaiz[]
  views      DocumentView[]

  userId String
  user   User @relation(fields: [userId], references: [id])
}
model Chat {
  id        Int      @id @default(autoincrement())
  text      String?
  image     String?

  messages    Message[]  // 1 Chat â†’ many Messages

  documentSlug String
  document   Document @relation(fields: [documentSlug], references: [slug],onDelete: Cascade)

  userId     String?
  user       User?    @relation(fields: [userId], references: [id])

  @@unique([userId, documentSlug])
}
model Message {
  id        Int      @id @default(autoincrement())
  chatId    Int
  role      String   // "user" or "assistant"
  content   String
  createdAt DateTime @default(now())

  chat      Chat     @relation(fields: [chatId], references: [id])
}


model FlashCard {
  id    Int     @id @default(autoincrement())
  title String?
  text  String?
  image String?
  tip String?
  documentId Int
  document   Document @relation(fields: [documentId], references: [id],onDelete: Cascade)

  userId String
  user   User @relation(fields: [userId], references: [id])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Quaiz {
  id    Int     @id @default(autoincrement())
  title String?
  image String?
  createdAt DateTime @default(now())

  difficulty    Difficulty @default(MEDIUM)
  questionCount Int // Number of questions in this quiz

  documentSlug String
  document   Document @relation(fields: [documentSlug], references: [slug],onDelete: Cascade)

  userId String
  user   User @relation(fields: [userId], references: [id])

  questions Question[]
  results   QuizResult[]
}

model Question {
  id   Int    @id @default(autoincrement())
  text String
  title String?

  quaizId Int
  quaiz   Quaiz @relation(fields: [quaizId], references: [id])

  options     Option[]
  userAnswers UserAnswer[]
}

model Option {
  id        Int     @id @default(autoincrement())
  text      String
  isCorrect Boolean @default(false)

  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  selectedBy UserAnswer[] @relation("SelectedOptionRelation")
}

model UserAnswer {
  id Int @id @default(autoincrement())

  userId String
  user   User @relation(fields: [userId], references: [id])

  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  selectedOptionId Int?
  selectedOption   Option? @relation("SelectedOptionRelation", fields: [selectedOptionId], references: [id])

  isCorrect  Boolean
  answeredAt DateTime @default(now())

  quizResultId Int
  quizResult   QuizResult @relation(fields: [quizResultId], references: [id])

  @@unique([userId, questionId])
}

model QuizResult {
  id Int @id @default(autoincrement())

  userId String
  user   User @relation(fields: [userId], references: [id])

  quaizId Int
  quaiz   Quaiz @relation(fields: [quaizId], references: [id])

  score       Int
  total       Int
  completedAt DateTime @default(now())

  userAnswers UserAnswer[]
}

model DocumentView {
  id Int @id @default(autoincrement())

  documentId Int
  document   Document @relation(fields: [documentId], references: [id],onDelete: Cascade)

  userId String
  user   User @relation(fields: [userId], references: [id])

  viewedAt DateTime @default(now())

  @@unique([documentId, userId])
}

model User {
  id        String     @id 
  email     String? @unique
  userName  String?  @unique
  firstName String?
  lastName  String?
  image     String?

  chats       Chat[]
  documents   Document[]
  flashCards  FlashCard[]
  quaizzes    Quaiz[]
  answers     UserAnswer[]
  quizResults QuizResult[]
  views       DocumentView[]
}
